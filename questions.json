[
    {
      "question": "Which of the following is a valid declaration of a pointer in C++?",
      "answers": [
        { "text": "int ptr;", "correct": false },
        { "text": "int *ptr;", "correct": true },
        { "text": "ptr int;", "correct": false },
        { "text": "int& ptr;", "correct": false }
      ]
    },
    {
      "question": "What is the default access specifier for members of a class in C++?",
      "answers": [
        { "text": "public", "correct": false },
        { "text": "protected", "correct": false },
        { "text": "private", "correct": true },
        { "text": "friend", "correct": false }
      ]
    },
    {
      "question": "Which of the following is not a type of constructor in C++?",
      "answers": [
        { "text": "Default constructor", "correct": false },
        { "text": "Parameterized constructor", "correct": false },
        { "text": "Copy constructor", "correct": false },
        { "text": "Static constructor", "correct": true }
      ]
    },
    {
      "question": "Which operator is used to allocate memory dynamically in C++?",
      "answers": [
        { "text": "malloc()", "correct": false },
        { "text": "new", "correct": true },
        { "text": "alloc()", "correct": false },
        { "text": "create()", "correct": false }
      ]
    },
    {
      "question": "What is the purpose of the 'virtual' keyword in C++?",
      "answers": [
        { "text": "To create a static member", "correct": false },
        { "text": "To achieve polymorphism", "correct": true },
        { "text": "To declare a global variable", "correct": false },
        { "text": "To define a function template", "correct": false }
      ]
    },
    {
      "question": "Which of the following can be used to handle exceptions in C++?",
      "answers": [
        { "text": "try-catch", "correct": true },
        { "text": "throw-catch", "correct": false },
        { "text": "exception-try", "correct": false },
        { "text": "handle-exception", "correct": false }
      ]
    },
    {
      "question": "What will happen if you try to access a member of a deleted object in C++?",
      "answers": [
        { "text": "It will return null", "correct": false },
        { "text": "It will cause a compile-time error", "correct": false },
        { "text": "It will cause undefined behavior", "correct": true },
        { "text": "It will display an error message", "correct": false }
      ]
    },
    {
      "question": "Which STL container maintains the order of elements?",
      "answers": [
        { "text": "set", "correct": false },
        { "text": "unordered_map", "correct": false },
        { "text": "vector", "correct": true },
        { "text": "map", "correct": false }
      ]
    },
    {
      "question": "Which keyword is used to inherit a class in C++?",
      "answers": [
        { "text": "extends", "correct": false },
        { "text": "inherits", "correct": false },
        { "text": "base", "correct": false },
        { "text": "public", "correct": true }
      ]
    },
    {
      "question": "What is the output of the following code snippet: 'int a = 5; cout << ++a;`?",
      "answers": [
        { "text": "5", "correct": false },
        { "text": "6", "correct": true },
        { "text": "7", "correct": false },
        { "text": "Error", "correct": false }
      ]
    },
    {
      "question": "Which of the following is a feature of Object-Oriented Programming?",
      "answers": [
        { "text": "Encapsulation", "correct": true },
        { "text": "Structured programming", "correct": false },
        { "text": "Procedural programming", "correct": false },
        { "text": "Functional programming", "correct": false }
      ]
    },
    {
      "question": "What does the 'delete' operator do in C++?",
      "answers": [
        { "text": "Removes an element from a vector", "correct": false },
        { "text": "Deallocates memory allocated with 'new'", "correct": true },
        { "text": "Deletes a file", "correct": false },
        { "text": "Terminates the program", "correct": false }
      ]
    },
    {
      "question": "Which function is called when an object goes out of scope in C++?",
      "answers": [
        { "text": "Destructor", "correct": true },
        { "text": "Constructor", "correct": false },
        { "text": "Finalizer", "correct": false },
        { "text": "Garbage collector", "correct": false }
      ]
    },
    {
      "question": "What will be the output of this code: 'cout << (5 == 5);'?",
      "answers": [
        { "text": "true", "correct": false },
        { "text": "1", "correct": true },
        { "text": "0", "correct": false },
        { "text": "false", "correct": false }
      ]
    },
    {
      "question": "Which of the following is a member function of the string class in C++?",
      "answers": [
        { "text": "size()", "correct": false },
        { "text": "length()", "correct":false },
        { "text": "append()", "correct": false },
        { "text": "All of the above", "correct": true }
      ]
    },
    {
      "question": "Which C++ standard library provides algorithms for operations on containers?",
      "answers": [
        { "text": "vector", "correct": false },
        { "text": "algorithm", "correct": true },
        { "text": "iostream", "correct": false },
        { "text": "string", "correct": false }
      ]
    },
    {
      "question": "What does 'using namespace std;' do?",
      "answers": [
        { "text": "Makes the standard library available", "correct": true },
        { "text": "Declares a namespace", "correct": false },
        { "text": "Creates a new namespace", "correct": false },
        { "text": "Ends the program", "correct": false }
      ]
    },
    {
      "question": "Which of the following is a correct way to define a function in C++?",
      "answers": [
        { "text": "void functionName() {}", "correct": true },
        { "text": "function functionName() {}", "correct": false },
        { "text": "void functionName[] {}", "correct": false },
        { "text": "functionName() void {}", "correct": false }
      ]
    },
    {
      "question": "What is the primary purpose of a destructor in C++?",
      "answers": [
        { "text": "To initialize objects", "correct": false },
        { "text": "To release resources", "correct": true },
        { "text": "To copy objects", "correct": false },
        { "text": "To overload operators", "correct": false }
      ]
    },
    {
      "question": "What does the 'friend' keyword do in C++?",
      "answers": [
        { "text": "Allows access to private members", "correct": true },
        { "text": "Declares a base class", "correct": false },
        { "text": "Defines a global variable", "correct": false },
        { "text": "Creates a new class", "correct": false }
      ]
    },
    {
      "question": "Which of the following cannot be overloaded in C++?",
      "answers": [
        { "text": "Operators", "correct": false },
        { "text": "Functions", "correct": false },
        { "text": "New", "correct": false },
        { "text": "Scope resolution operator (::)", "correct": true }
      ]
    },
    {
      "question": "What is the output of this expression: '5 / 2' in C++?",
      "answers": [
        { "text": "2", "correct": true },
        { "text": "2.5", "correct": false },
        { "text": "3", "correct": false },
        { "text": "Error", "correct": false }
      ]
    },
    {
        "question": "What will the following code print: 'cout << \"Hello World\";'?",
        "answers": [
          { "text": "Hello", "correct": false },
          { "text": "World", "correct": false },
          { "text": "Hello World", "correct": true },
          { "text": "Error", "correct": false }
        ]
      },
    {
    "question": "What is the primary difference between C and C++? \na) C++ supports classes and objects, while C does not. b) C is faster than C++. c) C++ has better support for low-level programming than C. d) C++ does not support pointers.",
    "answers": [
      { "text": "C++ supports classes and objects, while C does not.", "correct": true },
      { "text": "C is faster than C++.", "correct": false },
      { "text": "C++ has better support for low-level programming than C.", "correct": false },
      { "text": "C++ does not support pointers.", "correct": false }
    ]
  },
  {
    "question": "What is a class in C++? \na) A blueprint for creating objects. b) A type of function. c) A variable type. d) A data type for storing numbers.",
    "answers": [
      { "text": "A blueprint for creating objects.", "correct": true },
      { "text": "A type of function.", "correct": false },
      { "text": "A variable type.", "correct": false },
      { "text": "A data type for storing numbers.", "correct": false }
    ]
  },
  {
    "question": "What is the purpose of constructors in C++? \na) To initialize objects. b) To destroy objects. c) To declare variables. d) To perform calculations.",
    "answers": [
      { "text": "To initialize objects.", "correct": true },
      { "text": "To destroy objects.", "correct": false },
      { "text": "To declare variables.", "correct": false },
      { "text": "To perform calculations.", "correct": false }
    ]
  },
  {
    "question": "What is polymorphism in C++? \na) The ability of a function to take many forms. b) The ability to hide data. c) The ability to create multiple objects. d) The ability to inherit properties.",
    "answers": [
      { "text": "The ability of a function to take many forms.", "correct": true },
      { "text": "The ability to hide data.", "correct": false },
      { "text": "The ability to create multiple objects.", "correct": false },
      { "text": "The ability to inherit properties.", "correct": false }
    ]
  },
  {
    "question": "What is the use of the 'this' pointer in C++? \na) To refer to the current object. b) To refer to the previous object. c) To declare static members. d) To access private members only.",
    "answers": [
      { "text": "To refer to the current object.", "correct": true },
      { "text": "To refer to the previous object.", "correct": false },
      { "text": "To declare static members.", "correct": false },
      { "text": "To access private members only.", "correct": false }
    ]
  },
  {
    "question": "What is encapsulation in C++? \na) The bundling of data with methods that operate on that data. b) The ability to inherit properties. c) The ability to use multiple forms of a function. d) The process of creating a class.",
    "answers": [
      { "text": "The bundling of data with methods that operate on that data.", "correct": true },
      { "text": "The ability to inherit properties.", "correct": false },
      { "text": "The ability to use multiple forms of a function.", "correct": false },
      { "text": "The process of creating a class.", "correct": false }
    ]
  },
  {
    "question": "What is inheritance in C++? \na) The process of acquiring properties and behaviors from another class. b) The ability to create new classes. c) The ability to overload functions. d) The process of hiding data.",
    "answers": [
      { "text": "The process of acquiring properties and behaviors from another class.", "correct": true },
      { "text": "The ability to create new classes.", "correct": false },
      { "text": "The ability to overload functions.", "correct": false },
      { "text": "The process of hiding data.", "correct": false }
    ]
  },
  {
    "question": "What are access specifiers in C++? \na) Keywords that define the accessibility of members in a class. b) Keywords used for defining variables. c) Keywords used for creating objects. d) Keywords for defining functions.",
    "answers": [
      { "text": "Keywords that define the accessibility of members in a class.", "correct": true },
      { "text": "Keywords used for defining variables.", "correct": false },
      { "text": "Keywords used for creating objects.", "correct": false },
      { "text": "Keywords for defining functions.", "correct": false }
    ]
  },
  {
    "question": "What is the difference between 'public', 'private', and 'protected' access specifiers? \na) Public members are accessible from anywhere, private members are only accessible within the class, and protected members are accessible within the class and by derived classes. b) Public members are only accessible within the class, private members are accessible from anywhere, and protected members are only accessible by derived classes. c) All members are accessible from anywhere. d) None of the above.",
    "answers": [
      { "text": "Public members are accessible from anywhere, private members are only accessible within the class, and protected members are accessible within the class and by derived classes.", "correct": true },
      { "text": "Public members are only accessible within the class, private members are accessible from anywhere, and protected members are only accessible by derived classes.", "correct": false },
      { "text": "All members are accessible from anywhere.", "correct": false },
      { "text": "None of the above.", "correct": false }
    ]
  },
  {
    "question": "What is the purpose of the destructor in C++? \na) To initialize objects. b) To clean up resources when an object goes out of scope. c) To declare variables. d) To perform calculations.",
    "answers": [
      { "text": "To clean up resources when an object goes out of scope.", "correct": true },
      { "text": "To initialize objects.", "correct": false },
      { "text": "To declare variables.", "correct": false },
      { "text": "To perform calculations.", "correct": false }
    ]
  },
  {
    "question": "What is operator overloading in C++? \na) The ability to use operators with user-defined types. b) The ability to define new operators. c) The ability to use operators only with built-in types. d) The ability to create new functions.",
    "answers": [
      { "text": "The ability to use operators with user-defined types.", "correct": true },
      { "text": "The ability to define new operators.", "correct": false },
      { "text": "The ability to use operators only with built-in types.", "correct": false },
      { "text": "The ability to create new functions.", "correct": false }
    ]
  },
  {
    "question": "What are templates in C++? \na) A feature that allows functions and classes to operate with generic types. b) A way to define variables. c) A method for inheritance. d) A method for encapsulation.",
    "answers": [
      { "text": "A feature that allows functions and classes to operate with generic types.", "correct": true },
      { "text": "A way to define variables.", "correct": false },
      { "text": "A method for inheritance.", "correct": false },
      { "text": "A method for encapsulation.", "correct": false }
    ]
  },
  {
    "question": "What is the difference between a reference and a pointer in C++? \na) A reference cannot be null and must be initialized when declared, while a pointer can be null and does not have to be initialized. b) A reference can be reassigned, while a pointer cannot. c) Pointers are faster than references. d) There is no difference.",
    "answers": [
      { "text": "A reference cannot be null and must be initialized when declared, while a pointer can be null and does not have to be initialized.", "correct": true },
      { "text": "A reference can be reassigned, while a pointer cannot.", "correct": false },
      { "text": "Pointers are faster than references.", "correct": false },
      { "text": "There is no difference.", "correct": false }
    ]
  },
  {
    "question": "What is exception handling in C++? \na) A mechanism to handle runtime errors. b) A way to declare variables. c) A method for inheritance. d) A method for encapsulation.",
    "answers": [
      { "text": "A mechanism to handle runtime errors.", "correct": true },
      { "text": "A way to declare variables.", "correct": false },
      { "text": "A method for inheritance.", "correct": false },
      { "text": "A method for encapsulation.", "correct": false }
    ]
  },
  {
    "question": "What is the 'new' keyword used for in C++? \na) To allocate memory dynamically. b) To declare a variable. c) To create a class. d) To define a function.",
    "answers": [
      { "text": "To allocate memory dynamically.", "correct": true },
      { "text": "To declare a variable.", "correct": false },
      { "text": "To create a class.", "correct": false },
      { "text": "To define a function.", "correct": false }
    ]
  },
  {
    "question": "What is the purpose of the 'virtual' keyword in C++? \na) To enable polymorphism. b) To declare a static member. c) To create a reference. d) To allocate memory dynamically.",
    "answers": [
      { "text": "To enable polymorphism.", "correct": true },
      { "text": "To declare a static member.", "correct": false },
      { "text": "To create a reference.", "correct": false },
      { "text": "To allocate memory dynamically.", "correct": false }
    ]
  },
  {
    "question": "What is the standard library in C++? \na) A collection of pre-defined classes and functions. b) A way to define variables. c) A method for inheritance. d) A method for encapsulation.",
    "answers": [
      { "text": "A collection of pre-defined classes and functions.", "correct": true },
      { "text": "A way to define variables.", "correct": false },
      { "text": "A method for inheritance.", "correct": false },
      { "text": "A method for encapsulation.", "correct": false }
    ]
  },
  {
    "question": "What is the purpose of 'namespace' in C++? \na) To organize code and prevent name conflicts. b) To declare variables. c) To define functions. d) To create objects.",
    "answers": [
      { "text": "To organize code and prevent name conflicts.", "correct": true },
      { "text": "To declare variables.", "correct": false },
      { "text": "To define functions.", "correct": false },
      { "text": "To create objects.", "correct": false }
    ]
  },
  {
    "question": "What is a destructor in C++? \na) A function that is called when an object is destroyed. b) A function that is called when an object is created. c) A function for overloading operators. d) A function for defining templates.",
    "answers": [
      { "text": "A function that is called when an object is destroyed.", "correct": true },
      { "text": "A function that is called when an object is created.", "correct": false },
      { "text": "A function for overloading operators.", "correct": false },
      { "text": "A function for defining templates.", "correct": false }
    ]
  },
  {
    "question": "What is the role of the 'static' keyword in C++? \na) To declare a member that belongs to the class rather than any object. b) To create a reference. c) To allocate memory dynamically. d) To enable polymorphism.",
    "answers": [
      { "text": "To declare a member that belongs to the class rather than any object.", "correct": true },
      { "text": "To create a reference.", "correct": false },
      { "text": "To allocate memory dynamically.", "correct": false },
      { "text": "To enable polymorphism.", "correct": false }
    ]
  },
  {
    "question": "What is the difference between 'struct' and 'class' in C++? \na) Members of a struct are public by default, while members of a class are private by default. b) Structs can only have member variables, while classes can have member functions. c) There is no difference. d) Classes are faster than structs.",
    "answers": [
      { "text": "Members of a struct are public by default, while members of a class are private by default.", "correct": true },
      { "text": "Structs can only have member variables, while classes can have member functions.", "correct": false },
      { "text": "There is no difference.", "correct": false },
      { "text": "Classes are faster than structs.", "correct": false }
    ]
  },
  {
    "question": "What is the purpose of the 'friend' keyword in C++? \na) To allow access to private and protected members of a class. b) To declare a function. c) To create a reference. d) To allocate memory dynamically.",
    "answers": [
      { "text": "To allow access to private and protected members of a class.", "correct": true },
      { "text": "To declare a function.", "correct": false },
      { "text": "To create a reference.", "correct": false },
      { "text": "To allocate memory dynamically.", "correct": false }
    ]
  }
  ]
  
